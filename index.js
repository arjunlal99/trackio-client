const axios = require('axios')
var cookieParser = require('cookie-parser')
const {v4:uuid} = require('uuid')

//trackio connection class

/*
    Initialise connection instance before sending signals to trackio server.
    This gives the oppurtunity to connect to multiple servers if required
*/

class ClientConnection {
  constructor(hostname,port, protocol = 'http'){
    /*
      hostname => String
      port => String
      protocol => String
      Hostname and port number of the trackio server that is listening
      hostname:port
      eg: localhost:5000
    */
    this.hostname = hostname
    this.port = port
    this.protocol = protocol
  }

  /*
      Obtain useragent information from endpoint, pass it as argument and send as POST body to trackio node server

      Also pass the end point tracked at the trackio-node end as the second argument
  */

  sendSignal(useragent, endpoint, uuid=""){
    /*
      useragent => JSON
      endpoint => String
      Eg: "/home", "/about"
      uuid => String (generated by uuid on the client side)
    */
    axios.post(this.protocol + '://' + this.hostname + ':' + this.port + endpoint, {information: useragent, timestamp: new Date().getTime(), uuid: uuid} ).then((res) => {
      console.log("userAgent Signal Sent Succesfully")
    }).catch((err) => {
      console.error("Check if trackio-node is running")
    })

  }

}

/* 
    Module exports the ClientConnection class definition
*/

exports.clientConnection = ClientConnection

/*
      Middleware function to check if uuid cookie is present.

      If present, pass it to sendSignal through uuid arguement

      If not present, then generate uuid and new uuid to sendSignal through uuid argument
*/

exports.checkCookie = function(req,res,next){
  /*
      If trackio_uuid cookie exists, the uuid is add to the request body,
      
      and passed to sendSignal at the final middleware in the stack
  */
      if (req.cookies.hasOwnProperty('trackio_uuid')){
        console.log("uuid present")
        req.uuid = req.cookies.trackio_uuid
      }
/*
      If it doesn't exist, a new uuid is generated using uuid module and set as cookie.

      This is then added to the request header and passed to sendSignal at the final middleware in the stack.
*/
      else{
        var trackio_uuid = uuid()
        res.cookie('trackio_uuid', trackio_uuid)
        console.log("uuid not present in cookie so set uuid ", trackio_uuid)
        req.uuid = trackio_uuid
      }

/*
      next() is called to call the next middleware in the stack.
*/
      next()
}

exports.cookieParser = cookieParser